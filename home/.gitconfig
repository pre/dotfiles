## Mislav Git tricks
## http://mislav.uniqpath.com/2010/07/git-tips/
##
# Find out if a change is part of a release
#   $ git name-rev --name-only 50f3754
#      "tags/v2.3.8~6"
#
#   $ pbpaste | git name-rev --stdin
#
#   "This bug was introduced in e6cadd422b72ba9818cc2f3b22243a6aa754c9f8 (tags/v2.3.6~215)
#   but fixed in 50f3754525c61e3ea84a407eb571617f2f39d6fe (tags/v2.3.8~6), if I recall
#   correctly."
##
# Find out which branch contains a change
#   $ git branch --contains 50f3754
#
##
# See which changes from a branch are already present upstream:
#
#   # while on "feature" branch:
#   $ git cherry -v master
#
#    + 497034f2 Listener.new now accepts a hash of options
#    - 2d0333ff cache the absolute images path for growl messages
#    + e4406858 rename Listener#run to #start
##
# Show the last commit which message matches a regex
#   $ git show :/fix
#   # shows the last commit which has the word "fix" in its message
#
#   $ git show :/^Merge
#   # shows the last merge commit
#
##
[core]
    excludesfile = /Users/pre/.gitignore
    editor = subl -w
    autocrlf = input
    whitespace = fix,space-before-tab,tab-in-indent,trailing-space
[user]
  name = Petrus Repo
  email = petrus.repo@iki.fi
  # Run the following command and get value of "sec" for signing key
  #   gpg2 --list-secret-keys
  #   gpg2 -K --keyid-format SHORT
  # signingkey = last 8 characters of the key name
  signingkey = 680211EC
# Save passpharse in keychain
#   brew cask install gpg-suite
# If passphrase is not remembered after reboot_
#   Test signing with
#     echo "test" | gpg2 --clearsign
#   Ensure gpg-agent is running
#   Check "gpg-agent" can be started, eg. no syntax errors in ~/.gnupg/gpg-agent.conf
# Use gpg2 instead of gpg
[gpg]
  program = gpg2
[commit]
  gpgsign = true
[tag]
  forceSignAnnotated = true
[alias]
    st = status -sb
    ci = commit
    co = checkout
    lbr = branch -a
    lbrv = branch -lvvv
    # List branches by date and author by the last commit, sort oldest last
    lbra = "! for branch in `git branch -r | grep -v HEAD`; do echo `git show --pretty=format:\"%ai %Cred %cn %Cgreen %ar %Creset\" $branch | head -n 1` $branch; done | sort -r"
    gren = grep -n
    todo = grep --heading --break --ignore-case -e 'TODO:'
    fixme  = grep --heading --break --ignore-case -e 'FIX:' -e 'FIXME:'
    checkpoint = !git stash && git stash apply
    staged = diff --cached
    cached = diff --cached
    unstaged = diff
    both = diff HEAD
    oneline = log --pretty=oneline
    amend = commit --amend
    cp = cherry-pick -x
    ch = cherry -v
    wdiff = diff --color-words
    tag-date = !git tag `date \"+%Y-%m-%d\"`  # create a new tag from HEAD with the current timestamp

    #
    # Log
    #
    l  = log --pretty=oneline --abbrev-commit --decorate
    ls = log --pretty=format:'%C(yellow)%h %C(cyan)%ad%C(red)%d %C(reset)%s%C(green) [%cn]' --decorate --date=short
    ll = log --all --graph --decorate --oneline --simplify-by-decoration
    my-commits = log --branches --author petrus.repo@iki.fi
    log-since = !git log $1 HEAD --pretty=format:%s
    log-feat-since = !git log $1 HEAD --pretty=format:%s --grep ^feat
    log-feat-since-long = !git log $1 HEAD --grep ^feat
    count   = !git shortlog -sn

    ; Same as l, but don't show merges
    lm  = log --pretty=oneline --abbrev-commit --decorate --no-merges

    # List branches from newest to oldest
    latest = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) [%(committername)]'

    daily = log --since '1 day ago' --oneline --author 'petrus.repo@iki.fi'

    tree = log --graph --pretty=format':%C(yellow)%h%C(cyan)%d%Creset %s %C(white) %an, %ar%Creset'

    #
    # Pull & Rebase
    #
    # Because branch merges in git are recorded with a merge commit, they are
    # supposed to be meaningful—for example, to indicate when a feature has
    # been merged to a release branch. However, during a regular daily workflow
    # where several team members sync a single branch often, the timeline gets
    # polluted with unnecessary micro-merges on regular git pull.  Rebasing
    # ensures that the commits are always re-applied so that the history stays
    # linear.
    #
    # You can configure certain branches to always do this without the --rebase flag:
    # % git config branch.master.rebase true
    rull = pull --rebase

    # If you want to execute a git pull or use git merge in order to explicitly
    # fast-forward, and you want to bail out if it can't fast-forward, then you
    # can use the --ff-only flag. This way you can regularly do something like
    # git pull --ff-only without thinking, and then if it errors out you can go
    # back and decide if you want to merge or rebase.
    full = pull --ff-only

    # Force push without rewriting history if remote has new changes
    pf = push --force-with-lease

[color]
    ui = true
    branch = auto
    diff = auto
    interactive = auto
    status = auto
# git push will by default push all branches that have the same name
# on the remote. To limit this behavior to just the current branch and
# to prevent accidental pushes to branches which you’re not ready to push yet:
[push]
  default = tracking
[rebase]
  stat = true
[interactive]
  singlekey = true
[grep]
  lineNumber = true

[diff]
  # Shifts the hunk boundary in an attempt to make the resulting
  # patch easier to read. Requires git 2.9+
  compactionHeuristic = true
  indentHeuristic = true

# Delete remote-tracking local branches that have been removed from remote
[fetch]
  prune = true

[merge]
   tool = lolmerge # This will be the default merge tool invoked by git mergetool.
[mergetool]
   keepBackup = false
   keepTemporaries = false
[mergetool "lolmerge"]
   cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge \
       "$PWD/$BASE" \
       "$PWD/$REMOTE" \
       "$PWD/$LOCAL" \
       "$PWD/$MERGED"
   keepBackup = false
   trustExitCode = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true
