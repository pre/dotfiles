## Keybinding resolver:
#  ctrl-v KEY

### Display execution time if command took longer than REPORTTIME_TOTAL
#
# https://superuser.com/a/847411/376927
#
REPORTTIME_TOTAL=60 # seconds
cmd_execution_time() {
  local stop=$((`date "+%s"`))
  let local "cmd_elapsed = ${stop} - ${cmd_start_time}"
  let local "cmd_minutes = ${cmd_elapsed} / 60"
  let local "cmd_seconds = ${cmd_elapsed} % 60"
  (( $cmd_elapsed > $REPORTTIME_TOTAL )) && print -P "%F{yellow}${cmd_minutes} min ${cmd_seconds} sec%f"
}

preexec() {
  cmd_start_time=$((`date "+%s"`))
}

precmd() {
  if (($+cmd_start_time)); then
    cmd_execution_time
  fi
}
###

export ARCHFLAGS="-arch x86_64"
export ANDROID_HOME="$HOME/Library/Android/sdk"
export GPG_TTY=$(tty)

export PATH="$PATH:${HOME}/.krew/bin"

# Get value with command (it's too slow to run at every start)
#   $(brew --prefix asdf)
export ASDF_DIR="/opt/homebrew/opt/asdf"

# HISTORY SETTINGS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_DUPS
setopt PUSHD_IGNORE_DUPS
setopt inc_append_history # save every command before it is executed
setopt share_history # retrieve the history file everytime history is called upon
HISTSIZE=1000000
SAVEHIST=1000000

setopt INTERACTIVE_COMMENTS # allow # character in interactive mode too

setopt COMPLETE_IN_WORD # not just at the end

setopt auto_cd
cdpath=($HOME/dev $HOME/Documents)

# RAILS
alias rc='rails c'
alias hrc='heroku run rails c'
alias hk='heroku'
alias hr='heroku run'

# Kill process PID by process name
# Useful when "killall" cannot find the process, eg. Sidekiq started by Foreman
kil() { kill $(pgrep "$@"); }
k9() { kill -9 $(pgrep "$@"); }

# DOCKER
export LNX_IMAGE="ptrs/lnx"
alias doc='docker-compose'
alias dup='docker-compose up --build --force-recreate'
alias de='docker exec'
alias deit='docker exec -it'
alias dbash='docker run --entrypoint bash -it'
alias docker-rm-dangling='docker rmi $(docker images -qf "dangling=true")'

docker-rm-containers() {
  docker ps -qa -f name="$*" | xargs docker rm;
}

docker-prune() {
  set -x
    docker container prune
    docker volume prune
    docker image prune
  set +x
}

alias bund='gem install bundler && bundle update --bundler'
alias be='bundle exec'
alias rakedb='rake db:migrate && rake db:test:prepare'

# GIT
alias gblw='git blame -w'  # ignores white space
alias gbl='git blame -M'   # ignores moving text
alias gbb='git blame -C'   # ignores moving text into other files
alias gg='git grep --break --heading --line-number'
alias gd='git diff'
alias gs='git diff --cached'
alias cop='git checkout -p'
alias rull='git pull --rebase'
alias cim='git ci -m'
alias gl='git log'
alias glp='git log -p'
alias glp1='git log -p -1'
alias g1='git log -p -1'
alias gld='git log --left-right --graph --cherry-mark --oneline' # "gld master.." list commits not in master
alias gll='git log --stat --graph --decorate' # --max-count=100
alias glll='git log --stat --graph --decorate --all'
alias glg='git log --graph'
alias glgg='git log --graph --decorate --all'
alias gls='git ls'
alias glsa='git ls --all' # where was i
alias sup='git submodule update --init'
alias gm='git mergetool'
alias gr='git rebase'
grih() { git rebase -i HEAD~"$1"; }
alias gri='git rebase -i'
alias grc='git rebase --continue'
alias gra='git rebase --abort'
alias grs='git rebase --skip'
alias st='git st'
alias gc='git clone'
alias gb='git branch'
alias gp='git push'
alias gpf='git pf'
alias gpu='git push -u origin HEAD'
## from SCM Breeze
#alias g='git'
#alias gap='git add -p'
#alias co='git co'
#alias ci='git ci'

# brew install forgit
alias gb="git-forgit checkout_branch"
alias glo="git-forgit log"
alias gbd="git-forgit branch_delete"

alias cat='ccat'
alias c='j'
alias e='code'
alias ee='code .'
alias o='open'
alias oo='open .'
alias t='traceroute -d 195.74.0.47' # is network down?
alias p='ping www.sci.fi'
alias dug="du -sch * | grep '^[\ 0-9,\.]*G'" # show only giga files
alias dus='du -sh * | gsort -h' # sort files by size
alias mkdir='mkdir -pv'
alias random-hex-64='openssl rand -hex 64'

alias less='bat' # brew install bat

# -R raw control characters
# -F quit if content fits on first screen
# -X Disables sending the termcap initialization and deinitialization strings to the terminal
export LESS="-RFX"

# List directories in either current or given directory
lsd() {
  local dest; dest="${1:-}"

  if [[ -z "${dest:-}" ]]; then
    command ls -ld *(-/DN)
  else
    command ls -ld ${dest}/*(-/DN)
  fi
}

# List hidden filenames which start with a dot in current or given directory
unalias lsa
lsa() {
  local dest; dest="${1:-}"

  if [[ -z "${dest:-}" ]]; then
    command ls -ld .*
  else
    command ls -ld ${dest}/.*
  fi
}

alias ..='cd ../'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'

alias locate='mdfind'

alias -g L='|less'
alias -g H='|head'
alias -g T='|tail'
alias -g G='|grep'

alias my-start='mysql.server start'
alias my-stop='mysql.server stop'
alias pg-start='pg_ctl -D /opt/homebrew/var/postgres -l /usr/local/var/postgres/server.log start'
alias pg-stop='pg_ctl -D /opt/homebrew/var/postgres stop -s -m fast'
alias redis-start='redis-server /opt/homebrew/etc/redis.conf'
alias mongo-start='mongod --config /opt/homebrew/etc/mongod.conf'

alias bund='gem install bundler'

alias web-server='echo http://localhost:8888 ; python -m SimpleHTTPServer 8888'
alias web-server-cors='http-server -p 8888 --cors' # npm install -g http-server

alias diff-inline='wdiff -w "$(tput bold;tput setaf 1)" -x "$(tput sgr0)" -y "$(tput bold;tput setaf 2)" -z "$(tput sgr0)"'

# Kubernetes
k8-refresh-workload() {
  if [ "$1" = "" ]; then echo "Usage: $0 workload_name"; return; fi

  echo "kubectl: Refresh Workload '$1'";
  kubectl patch workload "$1" --type=merge -p "{\"spec\":{\"refreshed_at\":\"$(date +'%s')\"}}";
}

compdef _rex _rex_safe
function _rex_safe() {
  local current_context; current_context="$(kubectl config current-context)"
  local expected_context; expected_context="rex"

  if [[ "${current_context}" != "${expected_context}" ]]; then
    echo "Abort: Live context ${current_context}"
    return 1
  fi

  command rex "$@"
}

export HELM_EXPERIMENTAL_OCI=1

find-files-larger-than() {
  local size; size="$1"

  if [[ -z "${size}" ]]; then echo "Usage: $0 <size, eg 100M>"; return 1; fi

  command find . -type f -size "+${size}"
}

# Print k8s secret value as plain text
#
# kubectl get secret sekritname -o json | k8s-secretplain
k8s-secret2plain() {
  jq '.data | map_values(@base64d)'
}

kkg-secret2plain() {
  local args; args=("${@}")

  if [[ -z "${args[*]}" ]]; then echo "Usage: $0 resource params"; return; fi

  kubectl get -o json secret ${args[@]}  | k8s-secret2plain
}

k8s-gardenerdomain() {
  command kubectl get configmap -n kube-system shoot-info -o=jsonpath={.data.domain}
}

local-fwd() {
  local from; from=$1
  local to; to=$2

  if [[ -z "${from}" ]] || [[ -z "${to}" ]]; then
    echo "Usage: $0 fromPort toPort"
    return
  fi

  command socat "tcp-l:${from},fork,reuseaddr" "tcp:127.0.0.1:${to}"
}

alias tf='terraform'
# sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
# sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
alias dnsflush="dscacheutil -flushcache"

alias lsof-ports='sudo lsof -i -P | grep LISTEN'

alias debug-efs-provisioner='kkl -n  aws-efs-csi-driver -l "app=efs-csi-controller" -c efs-plugin -c csi-provisioner'
alias debug-efs-driver='kkl -n  aws-efs-csi-driver -l "app=efs-csi-node" -c efs-plugin -c  csi-driver-registrar'

alias kt='kustomize --load-restrictor LoadRestrictionsNone'

alias kk='kubectl'
alias k='kubectl'
alias kkd='kubectl describe'
alias kd='kubectl describe'
alias kkg='kubectl get'
alias kg='kubectl get'
alias kkgy='kubectl get -o yaml'
alias kgy='kubectl get -o yaml'
alias kkgj='kubectl get -o json'
alias kgj='kubectl get -o json'

alias kke='kk exec -it'
alias ke='kk exec -it'
alias kkl='kk logs -f'
alias kl='kk logs -f'

alias kg-nonrun='k get pod -A | grep -v Running'

alias pf-alertmanager='kubectl port-forward  -n prometheus service/alertmanager-operated 8443:9093'
alias pf-prometheus='kubectl port-forward -n prometheus service/prometheus-operated 8444:9090'

alias -g NSA='--all-namespaces'
alias -g NSS='-n kube-system'
alias -g NSD='-n default'
alias -g Y='-o yaml'
alias -g J='-o json'
alias -g AC='--all-containers'
alias -g MLR='--max-log-requests'

klog() {
  if [ "$1" = "" ]; then echo "Usage: $0 pod container"; return; fi

  if [ "$2" = "" ]; then
    kubectl logs -f "$1"
  else
    kubectl logs -f "$1" -c "$2"
  fi
}

kconf() {
  local file='kubeconfig'

  if [ "$1" != "" ]; then file="$1"; fi

  local kubeconfig; kubeconfig="$(pwd)/${file}"

  if [ ! -f "${kubeconfig}" ]; then
    echo "File does not exist: ${kubeconfig}";
    return 1
  fi

  export KUBECONFIG=${kubeconfig}
  echo "KUBECONFIG=${KUBECONFIG}"
}

cloop() {
  while sleep 1; do clear; eval "$@"; done
}

loop() {
  while sleep 1; do eval "$@"; done
}

luup() {
  while sleep 1; do eval "$@" && return; done
}

netmon() {
  loop "( ping -t 1 192.168.1.254 >/dev/null || ( echo -n 'Network down: ' ; date  ; say 'Network down' ))"
}

# If you're using zsh (possibly with oh-my-zsh) and your prompt displays the
# current directory as "~rvm_rvmrc_cwd", the fix to add the following to your
# shell file before sourcing rvm:
unsetopt auto_name_dirs

# Link Rubies to Homebrew's OpenSSL 1.1 (which is upgraded)
# brew --prefix openssl@1.1 => /usr/local/opt/openssl@1.1
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=/opt/homebrew/opt/openssl@1.1"

# Custom bindings
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
#
# quote line: esc-'
# quote region: esc-"
# select region: ^Xx
# match bracket: ^X^B
# which: esc-?
# paste: ^y
bindkey "^Xi" select-in-word
bindkey "^X^i" select-in-word
bindkey "^Xf" kill-word # esc d
bindkey "^X^f" kill-word
bindkey "^Xd" kill-region
bindkey "^X^d" kill-region
bindkey "^[[1;2D" set-mark-command
bindkey "^[[1;2C" set-mark-command
bindkey "^[l" down-case-word

# SCM Breeze
# https://github.com/ndbroadbent/scm_breeze
[ -s "/Users/pre/.scm_breeze/scm_breeze.sh" ] && source "/Users/pre/.scm_breeze/scm_breeze.sh"

# esc-N outputs the path of corresponding SCM Breeze file in the current line
# eg. esc-1 outputs "$e1" which corresponds to the last file marked as [1] by SCM Breeze
_scmkey_esc1() { LBUFFER="${LBUFFER}\"${e1}\""; }; zle -N _scmkey_esc1 _scmkey_esc1; bindkey "^[1" _scmkey_esc1
_scmkey_esc2() { LBUFFER="${LBUFFER}\"${e2}\""; }; zle -N _scmkey_esc2 _scmkey_esc2; bindkey "^[2" _scmkey_esc2
_scmkey_esc3() { LBUFFER="${LBUFFER}\"${e3}\""; }; zle -N _scmkey_esc3 _scmkey_esc3; bindkey "^[3" _scmkey_esc3
_scmkey_esc4() { LBUFFER="${LBUFFER}\"${e4}\""; }; zle -N _scmkey_esc4 _scmkey_esc4; bindkey "^[4" _scmkey_esc4
_scmkey_esc5() { LBUFFER="${LBUFFER}\"${e5}\""; }; zle -N _scmkey_esc5 _scmkey_esc5; bindkey "^[5" _scmkey_esc5
_scmkey_esc6() { LBUFFER="${LBUFFER}\"${e6}\""; }; zle -N _scmkey_esc6 _scmkey_esc6; bindkey "^[6" _scmkey_esc6
_scmkey_esc7() { LBUFFER="${LBUFFER}\"${e7}\""; }; zle -N _scmkey_esc7 _scmkey_esc7; bindkey "^[7" _scmkey_esc7
_scmkey_esc8() { LBUFFER="${LBUFFER}\"${e8}\""; }; zle -N _scmkey_esc8 _scmkey_esc8; bindkey "^[8" _scmkey_esc8
_scmkey_esc9() { LBUFFER="${LBUFFER}\"${e9}\""; }; zle -N _scmkey_esc9 _scmkey_esc9; bindkey "^[9" _scmkey_esc9

# esc-shift-N outputs the directory of corresponding SCM Breeze file in the current line.
_scmkey_shift_esc1() { local dir; dir="$(dirname "${e1}")" LBUFFER="${LBUFFER}\"${dir}\""; }; zle -N _scmkey_shift_esc1 _scmkey_shift_esc1; bindkey "^[!" _scmkey_shift_esc1
_scmkey_shift_esc2() { local dir; dir="$(dirname "${e2}")" LBUFFER="${LBUFFER}\"${dir}\""; }; zle -N _scmkey_shift_esc2 _scmkey_shift_esc2; bindkey '^["' _scmkey_shift_esc2
_scmkey_shift_esc3() { local dir; dir="$(dirname "${e3}")" LBUFFER="${LBUFFER}\"${dir}\""; }; zle -N _scmkey_shift_esc3 _scmkey_shift_esc3; bindkey "^[#" _scmkey_shift_esc3
_scmkey_shift_esc4() { local dir; dir="$(dirname "${e4}")" LBUFFER="${LBUFFER}\"${dir}\""; }; zle -N _scmkey_shift_esc4 _scmkey_shift_esc4; bindkey "^[€" _scmkey_shift_esc4
_scmkey_shift_esc5() { local dir; dir="$(dirname "${e5}")" LBUFFER="${LBUFFER}\"${dir}\""; }; zle -N _scmkey_shift_esc5 _scmkey_shift_esc5; bindkey "^[%" _scmkey_shift_esc5
_scmkey_shift_esc6() { local dir; dir="$(dirname "${e6}")" LBUFFER="${LBUFFER}\"${dir}\""; }; zle -N _scmkey_shift_esc6 _scmkey_shift_esc6; bindkey "^[&" _scmkey_shift_esc6
_scmkey_shift_esc7() { local dir; dir="$(dirname "${e7}")" LBUFFER="${LBUFFER}\"${dir}\""; }; zle -N _scmkey_shift_esc7 _scmkey_shift_esc7; bindkey "^[/" _scmkey_shift_esc7
_scmkey_shift_esc8() { local dir; dir="$(dirname "${e8}")" LBUFFER="${LBUFFER}\"${dir}\""; }; zle -N _scmkey_shift_esc8 _scmkey_shift_esc8; bindkey "^[(" _scmkey_shift_esc8
_scmkey_shift_esc9() { local dir; dir="$(dirname "${e9}")" LBUFFER="${LBUFFER}\"${dir}\""; }; zle -N _scmkey_shift_esc9 _scmkey_shift_esc9; bindkey "^[)" _scmkey_shift_esc9

# https://github.com/junegunn/fzf
# ^T - select from list, use shift to select multiple
# ^R - fuzzy history
# cd ** - directory list
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


# iTerm2 shell integration
function iterm2_print_user_vars() {
  iterm2_set_user_var k8s_context "$(kubectl config current-context 2>/dev/null)"
  iterm2_set_user_var k8s_namespace "$(kubectl config view --minify --output 'jsonpath={..namespace}' 2>/dev/null)"
}
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

source /opt/homebrew/opt/asdf/libexec/asdf.sh

# RVM
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"


# nodenv
init-nodenv() { eval "$(nodenv init -)" }
#eval "$(nodenv init -)"

#export NVM_DIR="$HOME/.nvm"
#[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
#[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# PATH for the Google Cloud SDK.
if [ -f '/Users/pre/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/pre/google-cloud-sdk/path.zsh.inc'; fi

# shell command completion for gcloud.
if [ -f '/Users/pre/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/pre/google-cloud-sdk/completion.zsh.inc'; fi
