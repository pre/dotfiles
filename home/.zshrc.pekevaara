## Keybinding resolver:
#  ctrl-v KEY

### Display execution time if command took longer than REPORTTIME_TOTAL
#
# https://superuser.com/a/847411/376927
#
REPORTTIME_TOTAL=60 # seconds
cmd_execution_time() {
  local stop=$((`date "+%s"`))
  let local "cmd_elapsed = ${stop} - ${cmd_start_time}"
  let local "cmd_minutes = ${cmd_elapsed} / 60"
  let local "cmd_seconds = ${cmd_elapsed} % 60"
  (( $cmd_elapsed > $REPORTTIME_TOTAL )) && print -P "%F{yellow}${cmd_minutes} min ${cmd_seconds} sec%f"
}

preexec() {
  cmd_start_time=$((`date "+%s"`))
}

precmd() {
  if (($+cmd_start_time)); then
    cmd_execution_time
  fi
}
###

export ARCHFLAGS="-arch x86_64"

export PATH=/usr/local/bin:$PATH:$HOME/Library/Python/3.7/bin

# Get value with command (it's too slow to run at every start)
#   $(brew --prefix asdf)
export ASDF_DIR="/usr/local/opt/asdf"

# HISTORY SETTINGS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_DUPS
setopt PUSHD_IGNORE_DUPS
setopt inc_append_history # save every command before it is executed
setopt share_history # retrieve the history file everytime history is called upon
HISTSIZE=1000000
SAVEHIST=1000000

setopt INTERACTIVE_COMMENTS # allow # character in interactive mode too

setopt COMPLETE_IN_WORD # not just at the end

setopt auto_cd
cdpath=($HOME/dev $HOME/Documents)

# RAILS
alias rc='rails c'
alias hrc='heroku run rails c'
alias hk='heroku'
alias hr='heroku run'

# Kill process PID by process name
# Useful when "killall" cannot find the process, eg. Sidekiq started by Foreman
kil() { kill $(pgrep "$@"); }
k9() { kill -9 $(pgrep "$@"); }

# DOCKER
export LNX_IMAGE="ptrs/lnx"
alias de='docker exec'
alias deit='docker exec -it'
alias dbash='docker run --entrypoint bash -it'
alias docker-rm-dangling='docker rmi $(docker images -qf "dangling=true")'
docker-rm-containers() { docker ps -qa -f name="$*" | xargs docker rm; }

alias bund='gem install bundler'
alias be='bundle exec'
alias rakedb='rake db:migrate && rake db:test:prepare'

# GIT
alias gblw='git blame -w'  # ignores white space
alias gbl='git blame -M'   # ignores moving text
alias gbb='git blame -C'   # ignores moving text into other files
alias gg='git grep --break --heading --line-number'
alias gd='git diff'
alias gs='git diff --cached'
alias cop='git checkout -p'
alias rull='git pull --rebase'
alias cim='git ci -m'
alias gl='git log'
alias glp='git log -p'
alias glp1='git log -p -1'
alias g1='git log -p -1'
alias gld='git log --left-right --graph --cherry-mark --oneline' # "gld master.." list commits not in master
alias gll='git log --stat --graph --decorate' # --max-count=100
alias glll='git log --stat --graph --decorate --all'
alias glg='git log --graph'
alias glgg='git log --graph --decorate --all'
alias gls='git ls'
alias glsa='git ls --all' # where was i
alias sup='git submodule update --init'
alias gm='git mergetool'
alias gr='git rebase'
grih() { git rebase -i HEAD~"$1"; }
alias gri='git rebase -i'
alias grc='git rebase --continue'
alias gra='git rebase --abort'
alias grs='git rebase --skip'
alias st='git st'
alias gc='git clone'
alias gb='git branch'
alias gp='git push'
alias gpf='git pf'
alias gpu='git push -u origin HEAD'
## from SCM Breeze
#alias g='git'
#alias gap='git add -p'
#alias co='git co'
#alias ci='git ci'

alias cat='ccat'
alias c='j'
alias e='code'
alias ee='code .'
alias o='open'
alias oo='open .'
alias t='traceroute -d 195.74.0.47' # is network down?
alias p='ping www.sci.fi'
alias dug="du -sch * | grep '^[\ 0-9,\.]*G'" # show only giga files
alias dus='du -sh * | gsort -h' # sort files by size
alias less='less -R'
alias mkdir='mkdir -pv'

alias lsd='ls -ld *(-/DN)'
alias lsa='ls -ld .*'
alias ..='cd ../'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'

alias locate='mdfind'

alias -g L='|less'
alias -g H='|head'
alias -g T='|tail'
alias -g G='|grep'

alias my-start='mysql.server start'
alias my-stop='mysql.server stop'
alias pg-start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias pg-stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias redis-start='redis-server /usr/local/etc/redis.conf'
alias mongo-start='mongod --config /usr/local/etc/mongod.conf'

alias bund='gem install bundler'

## check also xip.io for local dns fiddling
alias web-server='echo http://localhost:8888 ; python -m SimpleHTTPServer 8888'

alias diff-inline='wdiff -w "$(tput bold;tput setaf 1)" -x "$(tput sgr0)" -y "$(tput bold;tput setaf 2)" -z "$(tput sgr0)"'

# Kubernetes
k8-refresh-workload() {
  if [ "$1" = "" ]; then echo "Usage: $0 workload_name"; return; fi

  echo "kubectl: Refresh Workload '$1'";
  kubectl patch workload "$1" --type=merge -p "{\"spec\":{\"refreshed_at\":\"$(date +'%s')\"}}";
}

compdef _rex _rex_safe
function _rex_safe() {
  local current_context; current_context="$(kubectl config current-context)"
  local expected_context; expected_context="rex"

  if [[ "${current_context}" != "${expected_context}" ]]; then
    echo "Abort: Live context ${current_context}"
    return 1
  fi

  command rex "$@"
}

# live cluster
alias kk='kubectl'
alias kkd='kubectl describe'
alias kkg='kubectl get'
alias kkgy='kubectl get -o yaml'

# dev cluster
alias k='_rex_safe kubectl '
alias kd='_rex_safe kubectl describe'
alias kg='_rex_safe kubectl get'
alias kgy='_rex_safe kubectl get -o yaml'

alias -g NSA='--all-namespaces'
alias -g NSS='-n kube-system'
alias -g NSD='-n default'

# brew install kube-fzf
alias kgg='findpod'
alias kdd='describepod'
alias ke='execpod'
alias kl='tailpod'
alias kpf='pfpod'

klog () {
  if [ "$1" = "" ]; then echo "Usage: $0 pod container"; return; fi

  if [ "$2" = "" ]; then
    kubectl logs -f "$1"
  else
    kubectl logs -f "$1" -c "$2"
  fi
}


kconf () {
  local file='kubeconfig'

  if [ "$1" != "" ]; then file="$1"; fi

  local kubeconfig; kubeconfig="$(pwd)/${file}"

  if [ ! -f "${kubeconfig}" ]; then
    echo "File does not exist: ${kubeconfig}";
    return 1
  fi

  export KUBECONFIG=${kubeconfig}
  echo "KUBECONFIG=${KUBECONFIG}"
}

loop() {
  while sleep 1; do eval "$@"; done
}

luup() {
  while sleep 1; do eval "$@" && return; done
}

# If you're using zsh (possibly with oh-my-zsh) and your prompt displays the
# current directory as "~rvm_rvmrc_cwd", the fix to add the following to your
# shell file before sourcing rvm:
unsetopt auto_name_dirs

# This loads RVM into a shell session.
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

# nodenv
eval "$(nodenv init -)"


# Custom bindings
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
#
# quote line: esc-'
# quote region: esc-"
# select region: ^Xx
# match bracket: ^X^B
# which: esc-?
# paste: ^y
bindkey "^Xi" select-in-word
bindkey "^X^i" select-in-word
bindkey "^Xf" kill-word # esc d
bindkey "^X^f" kill-word
bindkey "^Xd" kill-region
bindkey "^X^d" kill-region
bindkey "^[[1;2D" set-mark-command
bindkey "^[[1;2C" set-mark-command
bindkey "^[l" down-case-word

# SCM Breeze
# https://github.com/ndbroadbent/scm_breeze
[ -s "/Users/pre/.scm_breeze/scm_breeze.sh" ] && source "/Users/pre/.scm_breeze/scm_breeze.sh"

# https://github.com/junegunn/fzf
# ^T - select from list, use shift to select multiple
# ^R - fuzzy history
# cd ** - directory list
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


# iTerm2 shell integration
function iterm2_print_user_vars() {
  iterm2_set_user_var k8s_context "$(kubectl config current-context)"
  iterm2_set_user_var k8s_namespace "$(kubectl config view --minify --output 'jsonpath={..namespace}')"
}
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

source /usr/local/opt/asdf/asdf.sh
